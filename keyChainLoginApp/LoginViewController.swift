//
//  LoginViewController.swift
//  keyChainLoginApp
//
//  Created by Konstantin on 28.10.2021.
//

import UIKit

class LoginViewController: UIViewController, UITextFieldDelegate {
    
    @IBOutlet weak var userNameTextField: UITextField!
    @IBOutlet weak var passwordTextField: UITextField!
    @IBOutlet weak var loginButton: UIButton!
    
    var passwordReminder: String = ""
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        loginButton.layer.cornerRadius = 10
        userNameTextField.delegate = self
        passwordTextField.delegate = self
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow(sender:)), name: UIResponder.keyboardWillShowNotification, object: nil);

        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide(sender:)), name: UIResponder.keyboardWillHideNotification, object: nil);
    }
    
//    –º–µ—Ç–æ–¥ –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤ –∫–∏—á–µ–π–Ω
    private func submit() {
        guard
            let myPassword = passwordTextField.text, !myPassword.isEmpty,
            let myUsername = userNameTextField.text, !myUsername.isEmpty
        else {
            return
        }
        
        let passwordData = Data(myPassword.utf8)

        keyChainClass.save(key: myUsername, data: passwordData)
    }
    
//    implementation of unwind segue in the destination VC
    @IBAction func unwind( _ seg: UIStoryboardSegue) {
    }
    
//    functions neede to shift the contents of the screen when keyboard appears
    @objc func keyboardWillShow(sender: NSNotification) {
         self.view.frame.origin.y = -50 // Move view 150 points upward
    }
    @objc func keyboardWillHide(sender: NSNotification) {
         self.view.frame.origin.y = 0 // Move view to original position
    }
    
    
    //    —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π
    private func resetTextFields(){
        userNameTextField.text = ""
        passwordTextField.text = ""
    }
    
    //    —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç —Ñ–∏–ª–¥–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        switchBasedNextTextField(textField)
        return true
    }
    
    //    —Å–≤–∏—á—Ç –∫–µ–π—Å –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–µ–∫—Å—Ç —Ñ–∏–ª–¥–∞–º–∏ —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    private func switchBasedNextTextField(_ textField: UITextField) {
        switch textField {
        case userNameTextField:
            passwordTextField.becomeFirstResponder()
        default:
            passwordTextField.resignFirstResponder()
            loginButtonPressedWithoutSender()
        }
    }
    
    //    —Å–∫—Ä—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–∞–ø–æ–º –ø–æ —ç–∫—Ä–∞–Ω—É
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        super .touchesBegan(touches, with: event)
        view.endEditing(true)
    }
    
    @IBAction func forgotUserNameButtonPressed(_ sender: UIButton) {
        showAlert(title: "Sorry, but you need to know your login to enter.", message: "üòî")
    }
    
    
    @IBAction func forgorPasswordButtonPressed(_ sender: UIButton) {
        guard let checkLogin = userNameTextField.text, !checkLogin.isEmpty else {
            showAlert(title: "Wrong User Name or Password", message: "One or all fields are empty")
            return
        }
        if let myPassword = keyChainClass.getKeyChainData(key: userNameTextField.text!) {
            let result = String(decoding: myPassword, as: UTF8.self)
            self.passwordReminder = result
        }
// –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–º–Ω–∏—Ç —Å–≤–æ–π –ª–æ–≥–∏–Ω, —Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–º—É –ø–∞—Ä–æ–ª—å
        showAlert(title: "For user: \(userNameTextField.text ?? "")", message: "Password is: \(passwordReminder)" )
    }
    
//    —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –ª–æ–≥–∏–Ω
    @IBAction func loginButtonPressedWithoutSender() {
        submit()
        performSegue(withIdentifier: "toWelcomeScreen", sender: UIButton.self)
    }
    
//    –æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–≥–≤–µ—è –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ª–æ–≥–∏–Ω
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    
//      –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –µ—Å–ª–∏ –ø–æ–ª—è –ø—É—Å—Ç—ã–µ
        guard let checkLogin = userNameTextField.text, !checkLogin.isEmpty else {
            showAlert(title: "Wrong User Name or Password", message: "One or all fields are empty")
            return
        }
        guard let checkPassword = passwordTextField.text, !checkPassword.isEmpty else {
            showAlert(title: "Wrong User Name or Password", message: "One or all fields are empty")
            return
        }
        
        guard let welcomeVC = segue.destination as? WelcomeViewController else { return }
        welcomeVC.userGreetinLabel = userNameTextField.text ?? ""
        
        if let myPassword = keyChainClass.getKeyChainData(key: userNameTextField.text!) {
            let result = String(decoding: myPassword, as: UTF8.self)
            welcomeVC.userPasswordLabel = result
        }
        
        if let myCredentials = keyChainClass.getKeyChainData(key: userNameTextField.text!) {
            let result2 = String(decoding: myCredentials, as: UTF8.self)
            welcomeVC.userCred = result2
        }
        
        resetTextFields()
    }
}

// —ç–∫—Å—Ç–µ–Ω—à–Ω –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
extension LoginViewController {
    private func showAlert(title: String, message: String){
        let alert = UIAlertController(title: title, message: message, preferredStyle: .alert)
        let okAction = UIAlertAction(title: "OK", style: .default) { _ in
            self.passwordTextField.text = ""
            self.userNameTextField.text = ""
        }
        alert.addAction(okAction)
        present(alert, animated: true)
    }
}
